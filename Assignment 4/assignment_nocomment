import sys  

def clear_output_file():
    """
    Clears the output file.
    """
    
    with open("Battleship.out", 'w') as f:  
        pass  

def write_output_file(message):
    """
    Writes the given message to the output file.
    """
    
    with open("Battleship.out", 'a') as f:
        f.write(message)

def check_arguments():
    """
    Checks if the number of arguments is correct.
    """
    
    try:
        if len(sys.argv) != 5:  
            write_output_file("Invalid number of arguments. Expected 4, got " + str(len(sys.argv) - 1) + ".\n")
            raise ValueError("Invalid number of arguments. Expected 4, got " + str(len(sys.argv) - 1) + ".")
    except ValueError as e:
        print("ValueError:", e)
        sys.exit()    
        
def check_input_files():
    """
    Checks if the input files are reachable.
    """
    
    problemMakers = []  
    
    try:  
        open(sys.argv[1])  
    except FileNotFoundError:
        problemMakers.append(sys.argv[1])  
    try:    
        open(sys.argv[2])  
    except FileNotFoundError:
        problemMakers.append(sys.argv[2])
    try:    
        open(sys.argv[3])  
    except FileNotFoundError:
        problemMakers.append(sys.argv[3])
    try:    
        open(sys.argv[4])  
    except FileNotFoundError:
        problemMakers.append(sys.argv[4])
    
    if len(problemMakers) > 0:  
        print("IOError: input file(s) " + ", ".join(problemMakers) +" is/are not reachable.")  
        write_output_file("IOError: input file(s) " + ", ".join(problemMakers) +" is/are not reachable.\n")
        sys.exit()    

def read_ship_pos():
    """
    Reads the ship positions from the input files.
    """
    
    with open(sys.argv[1], 'r') as f:  
        player1 = f.readlines()  
    
    with open(sys.argv[2], 'r') as f:  
        player2 = f.readlines()
    global playerShips1, playerShips2  
    playerShips1 = []  
    playerShips2 = []  
    for row in player1:
        row = row.strip('\n')  
        values = row.split(";")  
        try:
            if len(values) != 10:  
                raise IndexError("Player1.txt file should contain exactly 10 positions.")
        except IndexError as e:  
            print(e)
            write_output_file(e)
            sys.exit()
        
        for value in values:  
            if value != "":    
                try:
                    assert len(value) == 1  
                    assert value in "BCPSD"  
                except AssertionError:
                    print("IndexError: Player1.txt file contains an invalid ship position.")  
                    write_output_file("IndexError: Player1.txt file contains an invalid ship position.\n")
                    sys.exit()
        
        values = [value if value else "-" for value in values]  
      
        playerShips1.append(values)  
    for row in player2:  
        row = row.strip('\n')
        values = row.split(";")
        try:
            if len(values) != 10:  
                raise IndexError("Player1.txt file should contain exactly 10 positions.")
        except IndexError as e:  
            print(e)
            write_output_file(e)
            sys.exit()
        
        for value in values:  
            if value != "":    
                try:
                    assert len(value) == 1  
                    assert value in "BCPSD"
                except AssertionError:
                    print("IndexError: Player1.txt file contains an invalid ship position.")  
                    write_output_file("IndexError: Player1.txt file contains an invalid ship position.\n")
                    sys.exit()
        
        values = [value if value else "-" for value in values]
        
        playerShips2.append(values)
    
def read_player_moves():
    """
    Reads the player moves from the input files.
    """
    
    global playerMoves1, playerMoves2  
    
    with open(sys.argv[3], 'r') as f:  
        playerMoves1 = f.readline().strip(";").split(";")  
    for element in playerMoves1:
        try:
            if element[0] == "1" and element[1] == "0":
                assert len(element) == 4  
            else:
                assert len(element) == 3  
        except AssertionError:
            print("IndexError: Player1.in file should contain exactly 3 characters in a move.")  
            write_output_file("IndexError: Player1.in file should contain exactly 3 characters in a move.\n")
            playerMoves1.remove(element)  
            continue  
        except IndexError:
            print("IndexError: Player1.in file should contain exactly 3 characters in a move.")  
            write_output_file("IndexError: Player1.in file should contain exactly 3 characters in a move.\n")
            playerMoves1.remove(element)  
            continue
        
        try:
            assert int(element[0]) in range(1, 11) or int(element[0:2]) in range(10,11) 
            if element[0] == "1" and element[1] == "0":
                assert element[3] in "ABCDEFGHIJ"  
            else:
                assert element[2] in "ABCDEFGHIJ"  
        except AssertionError:  
            print("AssertionError: Invalid operation in Player1.in file.")
            write_output_file("AssertionError: Invalid operation in player1.in file.\n")
            playerMoves1.remove(element)
            continue    
        except ValueError:
            print("ValueError: Player1.in file contains an invalid move.")
            write_output_file("ValueError: Player1.in file contains an invalid move.\n")
            playerMoves1.remove(element)
            continue
        except IndexError:
            print("IndexError: Player1.in file contains an invalid move.")
            write_output_file("IndexError: Player1.in file contains an invalid move.\n")
            playerMoves1.remove(element)
            continue    
    
    with open(sys.argv[4], 'r') as f:  
        playerMoves2 = f.readline().strip(";").split(";")
    for element in playerMoves2:
        try:
            if element[0] == "1" and element[1] == "0":
                assert len(element) == 4
            else:
                assert len(element) == 3
        except AssertionError:
            print("IndexError: Player2.in file should contain exactly 3 characters in a move.")
            write_output_file("IndexError: Player2.in file should contain exactly 3 characters in a move.\n")
            playerMoves2.remove(element)
            continue
        except IndexError:
            print("IndexError: Player2.in file should contain exactly 3 characters in a move.")
            write_output_file("IndexError: Player2.in file should contain exactly 3 characters in a move.\n")
            playerMoves2.remove(element)
            continue
        
        try:
            assert int(element[0]) in range(1, 10) or int(element[0:2]) in range(10, 11)  
            if element[0] == "1" and element[1] == "0":
                assert element[3] in "ABCDEFGHIJ"
            else:
                assert element[2] in "ABCDEFGHIJ"
        except AssertionError:
            print("AssertionError: Invalid operation in Player2.in file.")
            write_output_file("AssertionError: Invalid operation in Player2.in file.\n")
            playerMoves2.remove(element)
            continue
        except ValueError:
            print("ValueError: Player2.in file contains an invalid move.")
            write_output_file("ValueError: Player2.in file contains an invalid move.\n")
            playerMoves1.remove(element)
            continue
        except IndexError:
            print("IndexError: Player2.in file contains an invalid move.")
            write_output_file("IndexError: Player2.in file contains an invalid move.\n")
            playerMoves2.remove(element)
            continue
    
def define_ships(playerShip):
    """
    Defines the ships and their sizes in given player's ship positions lists.
    """
    
    global shipsLen, letters_to_numbers  
    
    
    shipsLen = {
        "B1_1": 4, "B2_1": 4, "B2_2": 4, "B1_2": 4,
        "P3_1": 2, "P4_1": 2, "P3_2": 2, "P4_2": 2,
        "P1_1": 2, "P2_1": 2, "P1_2": 2, "P2_2": 2,
        "C_1": 5, "C_2": 5, "D_1": 3, "D_2": 3, "S_1": 3, "S_2": 3
    }
    
    
    letters_to_numbers = {
        "A": 0, "B": 1, "C": 2, "D": 3, "E": 4, "F": 5,
        "G": 6, "H": 7, "I": 8, "J": 9        
    }
    
    problemMakers = ["B14", "B24", "P42", "P32","P12","P22"]
    
    for ship in problemMakers:  
        for i in range(10):  
            for j in range(10):  
                match = False  
                if playerShip[i][j]==ship[0]:  
                    for n,w in [(1,0),(0,1),(-1,0),(0,-1)]:  
                        try:
                            if playerShip[i+n][j+w]==ship[0] and (playerShip[i+n*2][j+w*2]==ship[0] or ship[0]=="P"):  
                                match = True  
                                direction = (n,w)  
                        except:  
                            pass  
                    if match:  
                        playerShip[i][j]=ship[:2]  
                        for t in range(1,int(ship[-1])):  
                            playerShip[i+t * direction[0]][j+t * direction[1]] = ship[:2]  
                        break
            if match:  
                break
            
def playTurn(player):
    """
    Plays the turn of the given player. Takes the player as a parameter.
    """
    
    global playerMoves1, playerMoves2, playerShips1, playerShips2  
    
    if player == 1:  
        opposer = "_2"  
        players_move = playerMoves1  
        opposer_ship = playerShips2  
    else:
        opposer = "_1"
        players_move = playerMoves2
        opposer_ship = playerShips1
        
    print("Player{}'s Move\n".format(player))  
    write_output_file("Player{}'s Move\n\n".format(player))
    
    print("Round: {}\t\t\t\t\tGrid Size: 10x10\n".format(gameturn))  
    write_output_file("Round: {}\t\t\t\t\tGrid Size: 10x10\n\n".format(gameturn))
    
    print("Player1's Hidden Board:\t\tPlayer2's Hidden Board:\n")  
    write_output_file("Player1's Hidden Board:\t\tPlayer2's Hidden Board:\n\n")
    
    print("  A B C D E F G H I J\t\t  A B C D E F G H I J")  
    write_output_file("  A B C D E F G H I J\t\t  A B C D E F G H I J\n")
    
    for i in range(10):  
        print(f"{i+1}", end="")  
        write_output_file(f"{i+1}")  
        for j in range(10):  
            if playerShips1[i][j][0] == "O":  
                to_print = "O"  
            elif playerShips1[i][j][0] == "X":  
                to_print = "X"  
            else:  
                to_print = "-"  
            print(" "*(i!=9 or j!=0) + to_print, end="")  
            write_output_file(" "*(i!=9 or j!=0) + f"{to_print}")
        print("\t\t", end="")  
        write_output_file("\t\t")
        print(f"{i+1}", end="")  
        write_output_file(f"{i+1}")
        for j in range(10):
            if playerShips2[i][j][0] == "O":
                to_print = "O"
            elif playerShips2[i][j][0] == "X":
                to_print = "X"
            else:
                to_print = "-"
            print(" "*(i!=9 or j!=0) + to_print, end="")
            write_output_file(" "*(i!=9 or j!=0) + f"{to_print}")
        print("")
        write_output_file("\n")
    print("")
    write_output_file("\n")
    for j in [["C"], ["B1", "B2"], ["D"], ["S"], ["P1", "P2", "P3", "P4"]]:  
        ship_1 = ""  
        ship_2 = ""  
        for k in j:  
            if shipsLen[k + "_1"] == 0:  
                ship_1 = "X " + ship_1  
            else:  
                ship_1 = ship_1 + "- "  
            if shipsLen[k + "_2"] == 0:  
                ship_2 = "X " + ship_2
            else:
                ship_2 = ship_2 + "- "
            if k[0] == "C":  
                ship = "Carrier"  
                tab_number = "\t\t"  
            elif k[0] == "B":  
                ship = "Battleship"
                tab_number = "\t"
            elif k[0] == "D":
                ship = "Destroyer"
                tab_number = "\t"
            elif k[0] == "S":
                ship = "Submarine"
                tab_number = "\t"
            elif k[0] == "P":
                ship = "Patrol Boat"
                tab_number = "\t"
            if k[0] == "P":  
                tab_number2 = "\t" * 3  
            else:  
                tab_number2 = "\t" * 4  
        print(f"{ship}{tab_number}{ship_1[:-1]}{tab_number2}{ship}{tab_number}{ship_2}")  
        write_output_file(f"{ship}{tab_number}{ship_1[:-1]}{tab_number2}{ship}{tab_number}{ship_2}\n")
    print("")
    write_output_file("\n")
    move = players_move[gameturn-1]  
    print("Enter your move: {}\n".format(move))  
    write_output_file("Enter your move: {}\n\n".format(move))
    move = move.split(",")  
    
    try:  
        shipsLen[opposer_ship[int(move[0]) - 1][letters_to_numbers[move[1]]]+opposer] -= 1 
    except:  
        pass  
    
    opposer_ship[int(move[0])-1][letters_to_numbers[move[1]]] = ("O" if opposer_ship[int(move[0])-1][
        letters_to_numbers[move[1]]] == "-" else "X") + opposer_ship[int(move[0])-1][letters_to_numbers[move[1]]]  

def winCondition(player):
    """
    Win condition function. It takes the player as a parameter. Prints the winner, last non-hidden tables and writes it to the output file.
    """
    
    print("Player{} Wins!\n".format(player))  
    write_output_file("Player{} Wins!\n\n".format(player))
    
    print("Final Information:\n")  
    write_output_file("Final Information:\n\n")
    
    print("Player1's Board\t\t\t\tPlayer2's Board")  
    write_output_file("Player1's Board\t\t\t\tPlayer2's Board\n")
    
    print("  A B C D E F G H I J\t\t  A B C D E F G H I J")  
    write_output_file("  A B C D E F G H I J\t\t  A B C D E F G H I J\n")
    
    for i in range(10):  
        print(f"{i+1}", end="")  
        write_output_file(f"{i+1}")
        for j in range(10):  
            to_print = playerShips1[i][j][0]  
            print(" "*(i!=9 or j!=0) + to_print, end="")  
            write_output_file(" "*(i!=9 or j!=0) + f"{to_print}")
        print("\t\t", end="")  
        write_output_file("\t\t")
        print(f"{i+1}", end="")  
        write_output_file(f"{i+1}")
        for j in range(10):
            to_print = playerShips2[i][j][0]
            print(" "*(i!=9 or j!=0) + to_print, end="")
            write_output_file(" "*(i!=9 or j!=0) + f"{to_print}")
        print("")
        write_output_file("\n")
    print("")
    write_output_file("\n")
    for j in [["C"], ["B1", "B2"], ["D"], ["S"], ["P1", "P1", "P3", "P4"]]:  
        ship_1 = ""
        ship_2 = ""
        for k in j:
            if shipsLen[k + "_1"] == 0:
                ship_1 = "X " + ship_1
            else:
                ship_1 = ship_1 + "- "
            if shipsLen[k + "_2"] == 0:
                ship_2 = "X " + ship_2
            else:
                ship_2 = ship_2 + "- "
            if k[0] == "C":
                ship = "Carrier"
                tab_number = "\t\t"
            elif k[0] == "B":
                ship = "Battleship"
                tab_number = "\t"
            elif k[0] == "D":
                ship = "Destroyer"
                tab_number = "\t"
            elif k[0] == "S":
                ship = "Submarine"
                tab_number = "\t"
            elif k[0] == "P":
                ship = "Patrol Boat"
                tab_number = "\t"
            if k[0] == "P":
                tab_number2 = "\t" * 3
            else:
                tab_number2 = "\t" * 4
        print(f"{ship}{tab_number}{ship_1[:-1]}{tab_number2}{ship}{tab_number}{ship_2}")  
        write_output_file(f"{ship}{tab_number}{ship_1[:-1]}{tab_number2}{ship}{tab_number}{ship_2}\n")

def drawCondition():
    """
    Draw condition function. Prints the draw message and writes it to the output file.
    """
    
    print("It's a Draw!\n")  
    write_output_file("It's a Draw!\n\n")
    
    print("Final Information:\n")  
    write_output_file("Final Information:\n\n")
    
    print("Player1's Board\t\t\t\tPlayer2's Board")  
    write_output_file("Player1's Board\t\t\t\tPlayer2's Board\n")
    
    print("  A B C D E F G H I J\t\t  A B C D E F G H I J")  
    write_output_file("  A B C D E F G H I J\t\t  A B C D E F G H I J\n")
    
    for i in range(10):  
        print(f"{i+1}", end="")  
        write_output_file(f"{i+1}")
        for j in range(10):  
            to_print = playerShips1[i][j][0]  
            print(" "*(i!=9 or j!=0) + to_print, end="")  
            write_output_file(" "*(i!=9 or j!=0) + f"{to_print}")
        print("\t\t", end="")  
        write_output_file("\t\t")
        print(f"{i+1}", end="")  
        write_output_file(f"{i+1}")
        for j in range(10):
            to_print = playerShips2[i][j][0]
            print(" "*(i!=9 or j!=0) + to_print, end="")
            write_output_file(" "*(i!=9 or j!=0) + f"{to_print}")
        print("")
        write_output_file("\n")
    print("")
    write_output_file("\n")
    for j in [["C"], ["B1", "B2"], ["D"], ["S"], ["P1", "P1", "P3", "P4"]]:  
        ship_1 = ""
        ship_2 = ""
        for k in j:
            if shipsLen[k + "_1"] == 0:
                ship_1 = "X " + ship_1
            else:
                ship_1 = ship_1 + "- "
            if shipsLen[k + "_2"] == 0:
                ship_2 = "X " + ship_2
            else:
                ship_2 = ship_2 + "- "
            if k[0] == "C":
                ship = "Carrier"
                tab_number = "\t\t"
            elif k[0] == "B":
                ship = "Battleship"
                tab_number = "\t"
            elif k[0] == "D":
                ship = "Destroyer"
                tab_number = "\t"
            elif k[0] == "S":
                ship = "Submarine"
                tab_number = "\t"
            elif k[0] == "P":
                ship = "Patrol Boat"
                tab_number = "\t"
            if k[0] == "P":
                tab_number2 = "\t" * 3
            else:
                tab_number2 = "\t" * 4
        print(f"{ship}{tab_number}{ship_1[:-1]}{tab_number2}{ship}{tab_number}{ship_2}")  
        write_output_file(f"{ship}{tab_number}{ship_1[:-1]}{tab_number2}{ship}{tab_number}{ship_2}\n")    

def playGame(turn):
    """
    Playing the game function. It takes the turn as a parameter. Calls other functions to play the game.
    """
    
    global gameturn, last_turn 
    gameturn = turn  
    
    if turn == 1:  
        print("Battle of Ships Game\n")  
        write_output_file("Battle of Ships Game\n\n")  
    playTurn(1)  
    playTurn(2)  
    
    nonsunk_ships1 = 0  
    nonsunk_ships2 = 0  
    
    for ship in shipsLen:  
        if ship[-1] == "1":  
            nonsunk_ships1 += shipsLen[ship]  
        else:  
            nonsunk_ships2 += shipsLen[ship]  
    
    if nonsunk_ships1 == 0 and nonsunk_ships2 == 0:  
        drawCondition()  
            
    elif nonsunk_ships1 == 0:  
        if nonsunk_ships2 == 1 and not last_turn:  
            playGame(turn+1)  
            last_turn = True  
        else:
            winCondition(2)  
    
    elif nonsunk_ships2 == 0:  
        if nonsunk_ships1 == 1 and not last_turn:
            playGame(turn+1)
            last_turn = True
        else:
            winCondition(1)  
    
    else:  
        playGame(turn+1)  

if __name__ == "__main__":  
    try:
        clear_output_file()  
        check_arguments()  
        check_input_files()  
        
        read_ship_pos()  
        read_player_moves()  
        
        define_ships(playerShips1)  
        define_ships(playerShips2)  
        
        last_turn = False  
        playGame(1)  
        
    except Exception as e:  
        print("kaBOOM: run for your life!")  
        sys.exit()
        
